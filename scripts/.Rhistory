# Imprimir el resumen
print(resumen_nueva_surface)
frecuencias <- table(train$nueva_surface)
moda <- as.numeric(names(frecuencias)[which.max(frecuencias)])
####### Aparte
# Ahora veamos la distribución del la nueva variable metros cuadrados
summary(train$metros_cuadrados) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = paste0(V1, " m²"))
summary(train$surface_total) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = paste0(V1, " m²"))
boxplot(train$surface_total, main="Boxplot de Tu Variable")
boxplot(train$metros_cuadrados, main="Boxplot de Tu Variable")
### Ver los metros cuadrados segun property type
# Cargar la librería dplyr si aún no está cargada
#install.packages("dplyr")
# Cargar la librería dplyr si aún no está cargada
# Cargar la librería dplyr si aún no está cargada
library(dplyr)
# Crear un resumen por metro cuadrado según property_type en data_train
resumen <- train %>%
group_by(property_type) %>%
summarize(
media_metro_cuadrado = mean(metros_cuadrados, na.rm = TRUE),
mediana_metro_cuadrado = median(metros_cuadrados, na.rm = TRUE),
min_metro_cuadrado = min(metros_cuadrados, na.rm = TRUE),
max_metro_cuadrado = max(metros_cuadrados, na.rm = TRUE)
)
# Imprimir el resumen
print(resumen)
# Crear un resumen por surface_total según property_type en data_train
resumen1 <- train %>%
group_by(property_type) %>%
summarize(
surface_total_cuadrado = mean(surface_total, na.rm = TRUE),
surface_total_cuadrado = median(surface_total, na.rm = TRUE),
min_surface_total= min(surface_total, na.rm = TRUE),
max_surface_total = max(surface_total, na.rm = TRUE)
)
# Imprimir el resumen
print(resumen1)
# Reemplazar NA con un valor predeterminado (por ejemplo, 0)
train <- train %>%
mutate(metros_cuadrados = ifelse(is.na(metros_cuadrados), 0, metros_cuadrados))
# Crear un resumen comparativo por property_type y numero_habitaciones
resumen_comparativo <- train %>%
group_by(property_type, bedrooms) %>%
summarize(
media_metros_cuadrados = mean(metros_cuadrados, na.rm = TRUE),
mediana_metros_cuadrados = median(metros_cuadrados, na.rm = TRUE),
min_metros_cuadrados = min(metros_cuadrados, na.rm = TRUE),
max_metros_cuadrados = max(metros_cuadrados, na.rm = TRUE)
)
# Imprimir el resumen comparativo
print(resumen_comparativo)
media_metros_cuadrados <- mean(train$metros_cuadrados, na.rm = TRUE)
# Imprimir la media
print(media_metros_cuadrados)
# Calcular la mediana de la columna metros_cuadrados (excluyendo NA)
mediana_metros_cuadrados <- median(train$metros_cuadrados, na.rm = TRUE)
mediana_metros_cuadrados
#install.packages("DescTools")
library(DescTools)
#install.packages("writexl")
library(writexl)
# Cargar la librería dplyr si aún no está cargada
library(dplyr)
# Calcular la moda de los metros cuadrados por número de habitaciones
moda_metros_cuadrados <- train %>%
group_by(bedrooms, property_type) %>%
summarize(moda_metros_cuadrados = Mode(metros_cuadrados, na.rm = TRUE))
# Verificar los resultados
print(moda_metros_cuadrados)
# Especifica la ruta y el nombre del archivo de Excel
ruta_excel <- "C:/Users/Usuario/Documents/Machine Learning/Taller_2/scripts/Tabla1.xlsx"
# Exporta la tabla de datos a un archivo de Excel
write_xlsx(moda_metros_cuadrados, ruta_excel)
# Cargar las librerías dplyr y writexl si aún no están cargadas
library(dplyr)
library(writexl)
# Calcular la media de los metros cuadrados por número de habitaciones y tipo de propiedad
median_metros_cuadrados <- train %>%
group_by(bedrooms, property_type) %>%
summarize(media_metros_cuadrados = median(metros_cuadrados, na.rm = TRUE))
# Verificar los resultados
print(median_metros_cuadrados)
# Especifica la ruta y el nombre del archivo de Excel
ruta_excel <- "C:/Users/Usuario/Documents/Machine Learning/Taller_2/scripts/Tabla1.xlsx"
# Exporta la tabla de datos a un archivo de Excel
write_xlsx(median_metros_cuadrados, ruta_excel)
View(resumen_comparativo)
train <- train %>%
mutate(metros_cuadrados = ifelse(metros_cuadrados == 0, NA, metros_cuadrados))
# Imprimir el resumen
print(resumen)
train <- train %>%
mutate(nueva_surface = ifelse(is.na(surface_total), metros_cuadrados, surface_total))
train %>%
summarise_all(~sum(is.na(.))) %>% transpose()
# Obtener un resumen estadístico de la variable "nueva_surface"
resumen_nueva_surface <- summary(train$nueva_surface)
# Imprimir el resumen
print(resumen_nueva_surface)
frecuencias <- table(train$nueva_surface)
moda <- as.numeric(names(frecuencias)[which.max(frecuencias)])
View(train)
View(train)
# Definir umbrales para valores extremos
umbral_inferior <- 15  # Umbral inferior arbitrario
umbral_superior <- 300  # Umbral superior arbitrario
# Crear una nueva columna para etiquetar valores extremos
train$extremo <- ifelse(train$metros_cuadrados < umbral_inferior | train$metros_cuadrados > umbral_superior, "Extremo", "No Extremo")
summary(no_extremos_data$metros_cuadrados)
# Crear subconjuntos de datos para valores extremos y no extremos
extremos_data <- train[train$extremo == "Extremo", ]
no_extremos_data <- train[train$extremo == "No Extremo", ]
# Calcular estadísticas descriptivas para los valores extremos
summary(extremos_data$metros_cuadrados)
# Calcular estadísticas descriptivas para los valores no extremos
summary(no_extremos_data$metros_cuadrados)
# Realizar análisis adicionales según tus necesidades en cada subconjunto
summary(no_extremos_data$metros_cuadrados)
# Definir umbrales para valores extremos
umbral_inferior <- 20  # Umbral inferior arbitrario
umbral_superior <- 400 # Umbral superior arbitrario
# Crear una nueva columna para etiquetar valores extremos
train$extremo <- ifelse(train$metros_cuadrados < umbral_inferior | train$metros_cuadrados > umbral_superior, "Extremo", "No Extremo")
# Crear subconjuntos de datos para valores extremos y no extremos
extremos_data <- train[train$extremo == "Extremo", ]
no_extremos_data <- train[train$extremo == "No Extremo", ]
# Calcular estadísticas descriptivas para los valores extremos
summary(extremos_data$metros_cuadrados)
no_extremos_data <- train[train$extremo == "No Extremo", ]
# Definir umbrales para valores extremos
umbral_inferior <- 20  # Umbral inferior arbitrario
umbral_superior <- 400 # Umbral superior arbitrario
# Crear una nueva columna para etiquetar valores extremos
train$extremo <- ifelse(train$metros_cuadrados < umbral_inferior | train$metros_cuadrados > umbral_superior, "Extremo", "No Extremo")
# Crear subconjuntos de datos para valores extremos y no extremos
extremos_data <- train[train$extremo == "Extremo", ]
no_extremos_data <- train[train$extremo == "No Extremo", ]
# Calcular estadísticas descriptivas para los valores extremos
summary(extremos_data$metros_cuadrados)
summary(no_extremos_data$metros_cuadrados)
umbral_inferior <- 40  # Umbral inferior arbitrario
umbral_superior <- 400 # Umbral superior arbitrario
# Crear una nueva columna para etiquetar valores extremos
train$extremo <- ifelse(train$metros_cuadrados < umbral_inferior | train$metros_cuadrados > umbral_superior, "Extremo", "No Extremo")
# Crear subconjuntos de datos para valores extremos y no extremos
extremos_data <- train[train$extremo == "Extremo", ]
no_extremos_data <- train[train$extremo == "No Extremo", ]
# Calcular estadísticas descriptivas para los valores extremos
summary(extremos_data$metros_cuadrados)
summary(no_extremos_data$metros_cuadrados)
# Definir umbrales para valores extremos
umbral_inferior <- 50  # Umbral inferior arbitrario
# Definir umbrales para valores extremos
umbral_inferior <- 20  # Umbral inferior arbitrario
umbral_superior <- 200 # Umbral superior arbitrario
# Crear una nueva columna para etiquetar valores extremos
train$extremo <- ifelse(train$metros_cuadrados < umbral_inferior | train$metros_cuadrados > umbral_superior, "Extremo", "No Extremo")
# Crear subconjuntos de datos para valores extremos y no extremos
extremos_data <- train[train$extremo == "Extremo", ]
no_extremos_data <- train[train$extremo == "No Extremo", ]
# Calcular estadísticas descriptivas para los valores extremos
summary(extremos_data$metros_cuadrados)
summary(no_extremos_data$metros_cuadrados)
# Definir umbrales para valores extremos
umbral_inferior <- 20  # Umbral inferior arbitrario
umbral_superior <- 1000 # Umbral superior arbitrario
# Crear una nueva columna para etiquetar valores extremos
train$extremo <- ifelse(train$metros_cuadrados < umbral_inferior | train$metros_cuadrados > umbral_superior, "Extremo", "No Extremo")
# Crear subconjuntos de datos para valores extremos y no extremos
extremos_data <- train[train$extremo == "Extremo", ]
no_extremos_data <- train[train$extremo == "No Extremo", ]
# Calcular estadísticas descriptivas para los valores extremos
summary(extremos_data$metros_cuadrados)
summary(no_extremos_data$metros_cuadrados)
# Calcular estadísticas descriptivas para los valores no extremos
summary(no_extremos_data$metros_cuadrados)
# Realizar análisis adicionales según tus necesidades en cada subconjunto
summary(no_extremos_data$metros_cuadrados)
# Definir umbrales para valores extremos
umbral_inferior <- 20  # Umbral inferior arbitrario
umbral_superior <- 1200 # Umbral superior arbitrario
# Crear una nueva columna para etiquetar valores extremos
train$extremo <- ifelse(train$metros_cuadrados < umbral_inferior | train$metros_cuadrados > umbral_superior, "Extremo", "No Extremo")
# Crear subconjuntos de datos para valores extremos y no extremos
extremos_data <- train[train$extremo == "Extremo", ]
no_extremos_data <- train[train$extremo == "No Extremo", ]
# Calcular estadísticas descriptivas para los valores extremos
summary(extremos_data$metros_cuadrados)
summary(no_extremos_data$metros_cuadrados)
# Calcular estadísticas descriptivas para los valores no extremos
summary(no_extremos_data$metros_cuadrados)
# Realizar análisis adicionales según tus necesidades en cada subconjunto
summary(no_extremos_data$metros_cuadrados)
# Calcular la moda de los metros cuadrados por número de habitaciones
moda_metros_cuadrados <- train %>%
group_by(bedrooms, property_type) %>%
summarize(moda_metros_cuadrados = Mode(metros_cuadrados, na.rm = TRUE))
View(moda_metros_cuadrados)
### Analisis descriptivo de rooms
train %>%
count(rooms) %>% head()
train %>%
count(bedrooms)
### Analisis descriptivo de rooms bathrooms
db %>%
count(bathrooms)
### Analisis descriptivo de rooms bathrooms
train %>%
count(bathrooms)
train %>%
summarise_all(~sum(is.na(.))) %>% transpose()
#Problem Set 2
#Big Data y Machine Learning para Economía Aplicada
# Celin Hernández: 202210067
# Merit Tejeda: 202210104
# Estefanía Laborde: 201533743
#install.packages("readxl")
library(readxl)
# Cargar pacman (contiene la función p_load)
library(pacman)
# Cargar las librerías listadas e instalarlas en caso de ser necesario
p_load(tidyverse, # Manipular dataframes
rio, # Import data easily
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un poligono
tmaptools, # geocode_OSM()
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Get OSM's data
tidymodels) #para modelos de ML
### Importar la Base de Datos
# Especifica la ubicación de la carpeta que contiene los archivos CSV
carpeta <- "G:/Mi unidad/Machine Learning/Taller 2/Bases de datos/"
# Nombres de los archivos CSV que deseas importar
archivos_a_importar <- c("test.csv", "train.csv", "submission_template.csv")
# Crea bases de datos separadas para cada archivo
for (archivo in archivos_a_importar) {
# Genera el nombre de la base de datos
nombre <- tools::file_path_sans_ext(archivo)
# Lee el archivo CSV y asigna el resultado a una base de datos con el mismo nombre
assign(nombre, read.csv(file.path(carpeta, archivo)))
}
train %>%
summarise_all(~sum(is.na(.))) %>% transpose()
# IMPUTACIÓN DE DATOS
#Encontremos la moda de número de habitaciones 3, cuartos y número de baños
train %>%
count(rooms) %>% head()
### Analisis descriptivo de rooms 3
train %>%
count(rooms) %>% head()
train %>%
count(bedrooms)
### Analisis descriptivo de rooms bathrooms 2
train %>%
count(bathrooms)
# Primero normalizaremos todo el texto
# Todo en minuscula
train <- train %>%
mutate(description = str_to_lower(description))
# Eliminamos tildes
train <- train %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
# Eliminamos caracteres especiales
train <- train %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
# Eliminamos espacios extras
train <- train %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
#### otra forma
# Crear una nueva columna "metros_cuadrados" basada en la descripción
train$metros_cuadrados <- NA
for (i in 1:nrow(train)) {
descripcion <- train$description[i]
# Buscar todas las coincidencias de números seguidos de "mts" o variantes
coincidencias <- gregexpr("\\d+(\\.\\d+)?\\s*(mts|mts²|m²|m2|metros cuadrados|metro cuadrado)", descripcion)
# Extraer todas las coincidencias
todas_coincidencias <- regmatches(descripcion, coincidencias)[[1]]
# Encontrar la coincidencia más cercana a la palabra "metros"
metros_cuadrados <- NA
distancia_minima <- Inf
for (coincidencia in todas_coincidencias) {
distancia_a_metros <- min(gregexpr("metros", coincidencia)[[1]])
if (distancia_a_metros < distancia_minima) {
distancia_minima <- distancia_a_metros
metros_cuadrados <- coincidencia
}
}
# Si se encontró una coincidencia, extraer el valor de metros cuadrados
if (!is.na(metros_cuadrados)) {
valor_metros <- regmatches(metros_cuadrados, gregexpr("\\d+(\\.\\d+)?", metros_cuadrados))[[1]]
train$metros_cuadrados[i] <- as.numeric(valor_metros)
}
}
# Obtener un resumen estadístico de la variable "metros_cuadrados"
resumen <- summary(train$metros_cuadrados)
#sustituir con NA LOS 0 de los
# Reemplazar los valores 0 con NA en la columna metros_cuadrados
train <- train %>%
mutate(metros_cuadrados = ifelse(metros_cuadrados == 0, NA, metros_cuadrados))
print(resumen)
print(resumen)
##### Imputar la moda para bedrooms y bathrooms
train <- train %>%
mutate(rooms = replace_na(rooms, 3),
bedrooms = replace_na(bedrooms, 3),
bathrooms = replace_na(bathrooms, 2),)
#Problem Set 2
#Big Data y Machine Learning para Economía Aplicada
# Celin Hernández: 202210067
# Merit Tejeda: 202210104
# Estefanía Laborde: 201533743
#install.packages("readxl")
library(readxl)
# Cargar pacman (contiene la función p_load)
library(pacman)
# Cargar las librerías listadas e instalarlas en caso de ser necesario
p_load(tidyverse, # Manipular dataframes
rio, # Import data easily
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un poligono
tmaptools, # geocode_OSM()
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Get OSM's data
tidymodels) #para modelos de ML
### Importar la Base de Datos
# Especifica la ubicación de la carpeta que contiene los archivos CSV
carpeta <- "G:/Mi unidad/Machine Learning/Taller 2/Bases de datos/"
# Nombres de los archivos CSV que deseas importar
archivos_a_importar <- c("test.csv", "train.csv", "submission_template.csv")
# Crea bases de datos separadas para cada archivo
for (archivo in archivos_a_importar) {
# Genera el nombre de la base de datos
nombre <- tools::file_path_sans_ext(archivo)
# Lee el archivo CSV y asigna el resultado a una base de datos con el mismo nombre
assign(nombre, read.csv(file.path(carpeta, archivo)))
}
train %>%
summarise_all(~sum(is.na(.))) %>% transpose()
# IMPUTACIÓN DE DATOS
#Encontremos la moda de número de habitaciones 3, cuartos y número de baños
train %>%
count(rooms) %>% head()
### Analisis descriptivo de rooms 3
train %>%
count(rooms) %>% head()
train %>%
count(bedrooms)
### Analisis descriptivo de rooms bathrooms 2
train %>%
count(bathrooms)
# Primero normalizaremos todo el texto
# Todo en minuscula
train <- train %>%
mutate(description = str_to_lower(description))
# Eliminamos tildes
train <- train %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
# Eliminamos caracteres especiales
train <- train %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
# Eliminamos espacios extras
train <- train %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
#### otra forma
# Crear una nueva columna "metros_cuadrados" basada en la descripción
train$metros_cuadrados <- NA
for (i in 1:nrow(train)) {
descripcion <- train$description[i]
# Buscar todas las coincidencias de números seguidos de "mts" o variantes
coincidencias <- gregexpr("\\d+(\\.\\d+)?\\s*(mts|mts²|m²|m2|metros cuadrados|metro cuadrado)", descripcion)
# Extraer todas las coincidencias
todas_coincidencias <- regmatches(descripcion, coincidencias)[[1]]
# Encontrar la coincidencia más cercana a la palabra "metros"
metros_cuadrados <- NA
distancia_minima <- Inf
for (coincidencia in todas_coincidencias) {
distancia_a_metros <- min(gregexpr("metros", coincidencia)[[1]])
if (distancia_a_metros < distancia_minima) {
distancia_minima <- distancia_a_metros
metros_cuadrados <- coincidencia
}
}
# Si se encontró una coincidencia, extraer el valor de metros cuadrados
if (!is.na(metros_cuadrados)) {
valor_metros <- regmatches(metros_cuadrados, gregexpr("\\d+(\\.\\d+)?", metros_cuadrados))[[1]]
train$metros_cuadrados[i] <- as.numeric(valor_metros)
}
}
# Obtener un resumen estadístico de la variable "metros_cuadrados"
resumen <- summary(train$metros_cuadrados)
#sustituir con NA LOS 0 de los
# Reemplazar los valores 0 con NA en la columna metros_cuadrados
train <- train %>%
mutate(metros_cuadrados = ifelse(metros_cuadrados == 0, NA, metros_cuadrados))
# Imprimir el resumen
print(resumen)
##### Imputar la moda para bedrooms y bathrooms
train <- train %>%
mutate(rooms = replace_na(rooms, 3),
bedrooms = replace_na(bedrooms, 3),
bathrooms = replace_na(bathrooms, 2),)
#### remplazar metros cuadrados solo cuando surface sea na
# Crear una nueva variable "nueva_surface" que reemplace "surface" con "metros_cuadrados" cuando "surface" sea NA
train <- train %>%
mutate(nueva_surface = ifelse(is.na(surface_total), metros_cuadrados, surface_total))
train %>%
summarise_all(~sum(is.na(.))) %>% transpose()
# Obtener un resumen estadístico de la variable "nueva_surface"
resumen_nueva_surface <- summary(train$nueva_surface)
# Imprimir el resumen
print(resumen_nueva_surface)
frecuencias <- table(train$nueva_surface)
moda <- as.numeric(names(frecuencias)[which.max(frecuencias)])
####### Aparte
# Ahora veamos la distribución del la nueva variable metros cuadrados
summary(train$metros_cuadrados) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = paste0(V1, " m²"))
summary(train$surface_total) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1 = paste0(V1, " m²"))
boxplot(train$surface_total, main="Boxplot de Tu Variable")
boxplot(train$metros_cuadrados, main="Boxplot de Tu Variable")
### Ver los metros cuadrados segun property type
# Cargar la librería dplyr si aún no está cargada
#install.packages("dplyr")
# Cargar la librería dplyr si aún no está cargada
# Cargar la librería dplyr si aún no está cargada
library(dplyr)
# Crear un resumen por metro cuadrado según property_type en data_train
resumen <- train %>%
group_by(property_type) %>%
summarize(
media_metro_cuadrado = mean(metros_cuadrados, na.rm = TRUE),
mediana_metro_cuadrado = median(metros_cuadrados, na.rm = TRUE),
min_metro_cuadrado = min(metros_cuadrados, na.rm = TRUE),
max_metro_cuadrado = max(metros_cuadrados, na.rm = TRUE)
)
# Imprimir el resumen
print(resumen)
# Crear un resumen por surface_total según property_type en data_train
resumen1 <- train %>%
group_by(property_type) %>%
summarize(
surface_total_cuadrado = mean(surface_total, na.rm = TRUE),
surface_total_cuadrado = median(surface_total, na.rm = TRUE),
min_surface_total= min(surface_total, na.rm = TRUE),
max_surface_total = max(surface_total, na.rm = TRUE)
)
# Imprimir el resumen
print(resumen1)
# Crear un resumen comparativo por property_type y numero_habitaciones
resumen_comparativo <- train %>%
group_by(property_type, bedrooms) %>%
summarize(
media_metros_cuadrados = mean(metros_cuadrados, na.rm = TRUE),
mediana_metros_cuadrados = median(metros_cuadrados, na.rm = TRUE),
min_metros_cuadrados = min(metros_cuadrados, na.rm = TRUE),
max_metros_cuadrados = max(metros_cuadrados, na.rm = TRUE)
)
# Imprimir el resumen comparativo
print(resumen_comparativo)
media_metros_cuadrados <- mean(train$metros_cuadrados, na.rm = TRUE)
# Imprimir la media
print(media_metros_cuadrados)
# Calcular la mediana de la columna metros_cuadrados (excluyendo NA)
mediana_metros_cuadrados <- median(train$metros_cuadrados, na.rm = TRUE)
mediana_metros_cuadrados
#install.packages("DescTools")
library(DescTools)
#install.packages("writexl")
library(writexl)
# Cargar la librería dplyr si aún no está cargada
library(dplyr)
# Calcular la moda de los metros cuadrados por número de habitaciones
moda_metros_cuadrados <- train %>%
group_by(bedrooms, property_type) %>%
summarize(moda_metros_cuadrados = Mode(metros_cuadrados, na.rm = TRUE))
# Verificar los resultados
print(moda_metros_cuadrados)
# Especifica la ruta y el nombre del archivo de Excel
ruta_excel <- "C:/Users/Usuario/Documents/Machine Learning/Taller_2/scripts/Tabla1.xlsx"
# Exporta la tabla de datos a un archivo de Excel
write_xlsx(moda_metros_cuadrados, ruta_excel)
# Cargar las librerías dplyr y writexl si aún no están cargadas
library(dplyr)
library(writexl)
# Calcular la media de los metros cuadrados por número de habitaciones y tipo de propiedad
median_metros_cuadrados <- train %>%
group_by(bedrooms, property_type) %>%
summarize(media_metros_cuadrados = median(metros_cuadrados, na.rm = TRUE))
# Verificar los resultados
print(median_metros_cuadrados)
# Especifica la ruta y el nombre del archivo de Excel
ruta_excel <- "C:/Users/Usuario/Documents/Machine Learning/Taller_2/scripts/Tabla1.xlsx"
# Exporta la tabla de datos a un archivo de Excel
write_xlsx(median_metros_cuadrados, ruta_excel)
View(moda_metros_cuadrados)
moda_metros_cuadrados <- train %>%
group_by(bedrooms, property_type) %>%
summarize(moda_metros_cuadrados = Mode(metros_cuadrados, na.rm = TRUE))
